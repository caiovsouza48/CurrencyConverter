//
//  HomeCurrencyConverterPresenterTests.swift
//  CurrencyConverter
//
//  Created by Caio de Souza on 12/02/19.
//  Copyright (c) 2019 Caio de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CurrencyConverter
import XCTest

class HomeCurrencyConverterPresenterTests: XCTestCase{
    // MARK: Subject under test
    var sut: HomeCurrencyConverterPresenter!
  
    // MARK: Test lifecycle
    
    override func setUp(){
        super.setUp()
        setupHomeCurrencyConverterPresenter()
    }
  
    override func tearDown(){
        super.tearDown()
    }
  
  // MARK: Test setup
    
    func setupHomeCurrencyConverterPresenter(){
        sut = HomeCurrencyConverterPresenter()
    }
  
  // MARK: Test doubles
  
    class HomeCurrencyConverterDisplayLogicSpy: HomeCurrencyConverterDisplayLogic{
        var displayCurrenciesCalled = false
        var displayUserInputAmountCalled = false
        
        func displayCurrencies(viewModel: HomeCurrencyConverter.FetchCurrencies.ViewModel) {
            displayCurrenciesCalled = true
        }
        
        func displayUserInputAmount(viewModel: HomeCurrencyConverter.UpdateCurrencyAmount.ViewModel) {
            displayUserInputAmountCalled = true
        }
        
    }
  
  // MARK: Tests
    
    func testPresentCurrencies(){
        // Given
        let spy = HomeCurrencyConverterDisplayLogicSpy()
        sut.viewController = spy
        let response = HomeCurrencyConverter.FetchCurrencies.Response(currentUserInputAmount: Decimal(1.0), currenciesData: Seeds.Currencies.euroApiResponse)
    
        // When
        sut.presentCurrencies(response: response)
        // Then
        XCTAssertTrue(spy.displayCurrenciesCalled, "presentCurrencies(response:) should ask the view controller to display the result")
    }
    
    func testPresentUpdateUserInputAmount(){
        // Given
        let spy = HomeCurrencyConverterDisplayLogicSpy()
        sut.viewController = spy
        let response = HomeCurrencyConverter.UpdateCurrencyAmount.Response(currentUserInputAmount: Decimal(1.0))
        
        // When
        sut.presentUpdateUserInputAmount(response: response)
        
        // Then
        XCTAssertTrue(spy.displayUserInputAmountCalled, "PresentUpdateUserInputAmount(response:) should ask the view controller to display the result")
    }
}
