//
//  HomeCurrencyConverterInteractorTests.swift
//  CurrencyConverter
//
//  Created by Caio de Souza on 12/02/19.
//  Copyright (c) 2019 Caio de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CurrencyConverter
import XCTest
import Alamofire


class HomeCurrencyConverterInteractorTests: XCTestCase{
    // MARK: Subject under test
    var sut: HomeCurrencyConverterInteractor!
  
    // MARK: Test lifecycle
    
    override func setUp(){
        super.setUp()
        setupHomeCurrencyConverterInteractor()
    }
    
    override func tearDown(){
        super.tearDown()
    }
  
    // MARK: Test setup
  
    func setupHomeCurrencyConverterInteractor(){
        sut = HomeCurrencyConverterInteractor()
        
    }
  
  // MARK: Test doubles
    
    class HomeCurrencyConverterPresentationLogicSpy: HomeCurrencyConverterPresentationLogic{
        // MARK: Method call expectations
        var presentCurrenciesCalled = false
        var updateUserInputAmountCalled = false
        
        func presentCurrencies(response: HomeCurrencyConverter.FetchCurrencies.Response) {
            presentCurrenciesCalled = true
        }
        
        func presentUpdateUserInputAmount(response: HomeCurrencyConverter.UpdateCurrencyAmount.Response) {
            
            updateUserInputAmountCalled = true
        }
    }
    
    class HomeCurrencyConverterServiceSpy : HomeCurrencyConverterService{
        // MARK: Method call expectatios
        var doFetchCurrenciesCalled = false
        
        func doFetchCurrencies(base: String, completionHandler: @escaping CurrencyConverterRestAPICompletionHandler) {
            doFetchCurrenciesCalled = true
            completionHandler(Result<CurrencyRevolutApiResponse>.success(Seeds.Currencies.euroApiResponse))
            
        }
        
        
    }
    
    class HomeCurrencyConverterWorkerSpy: HomeCurrencyConverterWorker {
        // MARK: Method call expectations
        var fetchCurrenciesCalled = false
        
        // MARK: Spied methods
        override func doFetchCurrencies(base: String,
                               successHandler: @escaping CurrencyConverterServiceSuccessHandler,
                               failureHandler: @escaping CurrencyConverterServiceFailureHandler){
            fetchCurrenciesCalled = true
            successHandler(Seeds.Currencies.euroApiResponse)
            
        }
    }
    
  
    // MARK: Tests
    
    func testDoFetchAndPresentCurrencies(){
        // Given
        let spy = HomeCurrencyConverterPresentationLogicSpy()
        sut.presenter = spy
        let currenciesWorkerSpy = HomeCurrencyConverterWorkerSpy(service: HomeCurrencyConverterServiceSpy())
        sut.worker = currenciesWorkerSpy
        
        let request = HomeCurrencyConverter.FetchCurrencies.Request(base: "EUR")
    
        // When
        sut.doFetchCurrencies(request: request)
    
        // Then
        XCTAssert(currenciesWorkerSpy.fetchCurrenciesCalled, "doFetchCurrencies() should ask HomeCurrencyConverterWorker to fetch currencies")
        XCTAssertTrue(spy.presentCurrenciesCalled, "doFetchCurrencies(request:) should ask the presenter to format the result")
    }
    
    func testDoUpdateUserInputAmount(){
        // Given
        let spy = HomeCurrencyConverterPresentationLogicSpy()
        sut.presenter = spy
        let amount = Decimal(Double.random(in: 1..<7))
        let request = HomeCurrencyConverter.UpdateCurrencyAmount.Request(amount: amount)
        
        // When
        sut.doUpdateUserInputAmount(request: request)
        
        // Then
        XCTAssertTrue(spy.updateUserInputAmountCalled, "doFetchCurrencies(request:) should ask the presenter to format the result")
        XCTAssert(sut.currentUserInputAmount == amount, "doUpdateUserInputAmount(request:) should update the variable currentUserInputAmount")
    }
}
