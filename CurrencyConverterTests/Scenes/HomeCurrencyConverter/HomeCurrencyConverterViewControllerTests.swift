//
//  HomeCurrencyConverterViewControllerTests.swift
//  CurrencyConverter
//
//  Created by Caio de Souza on 12/02/19.
//  Copyright (c) 2019 Caio de Souza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CurrencyConverter
import XCTest

class HomeCurrencyConverterViewControllerTests: XCTestCase{
    // MARK: Subject under test
  
    var sut: HomeCurrencyConverterViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
  
    override func setUp(){
        super.setUp()
        window = UIWindow()
        setupHomeCurrencyConverterViewController()
    }
  
    override func tearDown(){
        window = nil
        super.tearDown()
    }
  
    // MARK: Test setup
  
    func setupHomeCurrencyConverterViewController(){
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = (storyboard.instantiateViewController(withIdentifier: "HomeCurrencyConverterViewController") as! HomeCurrencyConverterViewController)
        loadView()
        sut.tableView.register(CurrencyTableViewCell.self)
        sut.rates = Seeds.Currencies.euroDisplayedRates
        sut.updateRows()
    }
  
    func loadView(){
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    class TableViewSpy: UITableView {
        // MARK: Method call expectations
        
        var reloadDataCalled = false
        var reloadRowsCalled = false
        
        // MARK: Spied methods
        
        override func reloadData(){
            reloadDataCalled = true
        }
        
        override func reloadRows(at indexPaths: [IndexPath], with animation: UITableView.RowAnimation) {
            reloadRowsCalled = true
            
        }
    }
  
  // MARK: Test doubles
  
    class HomeCurrencyConverterBusinessLogicSpy: HomeCurrencyConverterBusinessLogic{
        var doUpdateUserInputAmountCalled = false
        var doFetchCurrenciesCalled = false
    
        
        func doUpdateUserInputAmount(request: HomeCurrencyConverter.UpdateCurrencyAmount.Request) {
            doUpdateUserInputAmountCalled = true
        }
        
        func doFetchCurrencies(request: HomeCurrencyConverter.FetchCurrencies.Request) {
            doFetchCurrenciesCalled = true
        }
    }
  
  // MARK: Tests
    
    func testNumberOfSectionsInTableViewShouldAlwaysBeOne(){
        // Given
        let tableView = sut.tableView
        
        // When
        let numberOfSections = sut.numberOfSections(in: tableView!)
        
        // Then
        XCTAssertEqual(numberOfSections, 1, "The number of table view sections should always be 1")
    }
    
  
    
    
    func testShouldConfigureTableViewCellToDisplayRate(){
        // Given
        let tableView = sut.tableView
        // When
        let indexPath = IndexPath(row: 0, section: 0)
        let cell = sut.tableView(tableView!, cellForRowAt: indexPath) as! CurrencyTableViewCell
        
        // Then
        XCTAssertEqual(cell.currencyAbreviationLabel.text, Seeds.Currencies.euroDisplayedRates.first!.currencyAbbreviation, "A properly configured table view cell should display the currency Abreviation Label")
        let decimalCurrencyValue = Seeds.Currencies.euroDisplayedRates.first!.currencyValue
       XCTAssertEqual(cell.currencyAmountTextField.text, cell.formattedForCurrency(decimalValue: decimalCurrencyValue), "A properly configured table view cell should display the Currency Value")
    }
    
    func testDisplayCurrenciesShouldUpdateTheTableView(){
        // Given
        let tableViewSpy = TableViewSpy()
        sut.tableView = tableViewSpy
        
        
        // When
        let viewModel = HomeCurrencyConverter.FetchCurrencies.ViewModel(rates: Seeds.Currencies.euroDisplayedRates)
        sut.displayCurrencies(viewModel: viewModel)
        
        // Then
        XCTAssert(tableViewSpy.reloadDataCalled || tableViewSpy.reloadRowsCalled, "displayCurrencies(viewModel:) should update the table view Rows")
    }
    
    func testDisplayUserInputAmountShouldUpdateCurrencyValues(){
        // Given
        let tableViewSpy = TableViewSpy()
        sut.tableView = tableViewSpy
        
        
        // When
        let viewModel = HomeCurrencyConverter.UpdateCurrencyAmount.ViewModel(currentUserInputAmount: Decimal(2.0))
        sut.displayUserInputAmount(viewModel: viewModel)
        
        // Then
        XCTAssert(tableViewSpy.reloadDataCalled || tableViewSpy.reloadRowsCalled, "displayUserInputAmount(viewModel:) should update the table view Rows")
    }
}
